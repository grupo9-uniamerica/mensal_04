name: IaC Pipeline

on:
  push:
    branches:
      - master

jobs:
  infra:
    name: Provision Infra
    runs-on: ubuntu-latest
    outputs:
      vm_ip: ${{ steps.ip.outputs.vm_ip }}

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Criar chave.json
        run: |
          mkdir -p terraform
          echo "${{ secrets.GCP_CREDENTIALS }}" | base64 --decode > terraform/chave.json

      - name: Debug chave.json (remova depois de testar)
        run: |
          head terraform/chave.json

      - name: Criar SSH public key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.6.0'

      - name: Set GOOGLE_APPLICATION_CREDENTIALS
        run: echo "GOOGLE_APPLICATION_CREDENTIALS=$GITHUB_WORKSPACE/terraform/chave.json" >> $GITHUB_ENV

      - name: Init Terraform
        run: cd terraform && terraform init

      - name: Plan Terraform
        run: cd terraform && terraform plan

      - name: Apply Terraform
        run: cd terraform && terraform apply -auto-approve

      - name: Get VM IP
        id: ip
        run: |
          cd terraform
          sudo apt-get update && sudo apt-get install -y jq
          # Tenta primeiro com output JSON
          if ! IP=$(terraform output -json | jq -r '.public_ip.value'); then
            echo "Tentando método alternativo..."
            # Método alternativo usando o estado
            IP=$(terraform show -json | jq -r '.values.outputs.public_ip.value')
          fi
          echo "IP capturado: $IP"
          if [ -z "$IP" ]; then
            echo "❌ Erro: Não foi possível capturar o IP da VM"
            exit 1
          fi
          echo "vm_ip=$IP" >> $GITHUB_OUTPUT

      - name: Apagar chave.json
        run: rm terraform/chave.json

  deploy:
    name: Configure VM
    needs: infra
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Setup Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible sshpass

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Debug VM IP
        run: |
          echo "VM IP recebido: '${{ needs.infra.outputs.vm_ip }}'"

      - name: Configurar Inventory
        run: |
          cat > ansible/inventory.ini << EOF
          [webserver]
          ${{ needs.infra.outputs.vm_ip }} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa
          EOF

      - name: Debug Inventory
        run: |
          echo "Conteúdo do inventory.ini:"
          cat ansible/inventory.ini

      - name: Testar conexão SSH
        run: |
          echo "Testando conexão SSH com a VM..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@${{ needs.infra.outputs.vm_ip }} 'echo "Conexão SSH bem sucedida!"'
          if [ $? -eq 0 ]; then
            echo "✅ Conexão SSH estabelecida com sucesso!"
          else
            echo "❌ Falha na conexão SSH"
            exit 1
          fi

      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i ansible/inventory.ini ansible/playbook.yml

