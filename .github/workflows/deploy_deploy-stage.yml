name: Deploy to Development

on:
  push:
    branches: [ dev ]

env:
  GKE_CLUSTER: cluster
  GKE_ZONE: southamerica-east1-a
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

  DOCKER_USER: loungegario
  FRONT_IMAGE: loungegario/frontend-dev:latest
  BACK_IMAGE: loungegario/backend-dev:latest

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
      k8s: ${{ steps.filter.outputs.k8s }}
    steps:
      - uses: actions/checkout@v3

      - name: Check file changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'
            k8s:
              - 'k8s/dev/**'

  build-and-deploy:
    needs: changes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true' || needs.changes.outputs.k8s == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Docker Hub Login
      - name: Docker Hub Login
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      # Build e push frontend se necessário
      - name: Build and Push Frontend
        if: needs.changes.outputs.frontend == 'true'
        run: |
          docker build \
            --build-arg NEXT_PUBLIC_APP_URL=http://35.198.6.122 \
            --build-arg NEXT_PUBLIC_BACKEND_URL=http://backend.backend-dev.svc.cluster.local:8080 \
            -t $FRONT_IMAGE ./frontend
          docker push $FRONT_IMAGE

      # Build e push backend se necessário
      - name: Build and Push Backend
        if: needs.changes.outputs.backend == 'true'
        run: |
          docker build -t $BACK_IMAGE ./backend
          docker push $BACK_IMAGE

      # Autenticação GCP
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      # Instalar plugin de autenticação GKE
      - name: Install GKE gcloud auth plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin --quiet

      - name: Get GKE Credentials
        run: gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID

      # Atualizar frontend no GKE
      - name: Update frontend deployment
        if: needs.changes.outputs.frontend == 'true'
        run: |
          kubectl set image deployment/frontend frontend=$FRONT_IMAGE -n frontend-dev
          

      # Atualizar backend no GKE
      - name: Update backend deployment
        if: needs.changes.outputs.backend == 'true'
        run: |
          kubectl set image deployment/backend backend=$BACK_IMAGE -n backend-dev
          

      # Aplicar YAMLs do k8s se tiverem sido alterados
      - name: Apply Kubernetes manifests
        if: needs.changes.outputs.k8s == 'true'
        run: |
          kubectl apply -f k8s/dev/ 

      # Reiniciar deployments após todas as alterações
      - name: Restart deployments
        run: |
          if [ "${{ needs.changes.outputs.frontend }}" == "true" ]; then
            kubectl rollout restart deployment/frontend -n frontend-dev
            kubectl rollout status deployment/frontend -n frontend-dev --timeout=300s
          fi
          if [ "${{ needs.changes.outputs.backend }}" == "true" ]; then
            kubectl rollout restart deployment/backend -n backend-dev
            kubectl rollout status deployment/backend -n backend-dev --timeout=300s
          fi